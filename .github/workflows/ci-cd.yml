name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        terraform_version: [1.0.0]
        node_version: ['16']

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: ecr-repo-pearlthoghts
      ECS_SERVICE: hello-world-service
      ECS_CLUSTER: hello_world_cluster
      ECS_TASK_DEFINITION: hello-world-task
      CONTAINER_NAME: hello-world-container

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure unzip is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip || (sudo apt-get install -y apt-utils && sudo apt-get install -y unzip)
          sudo chmod +x $(which unzip)
          export PATH="$PATH:/usr/bin/unzip" 

      - name: Print PATH variable
        run: echo $PATH

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.terraform_version }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}

      - name: Install dependencies
        run: npm install

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Apply
        run: terraform apply -auto-approve 
        
      - name: Login to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ap-south-1
          registry: ${{ env.ECR_REPOSITORY }}
          mask-password: false
          registry-type: 'self-hosted'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Docker registry
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Build, tag, and push image to Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr_login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS Service
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-south-1
        run: aws ecs update-service --cluster hello_world_cluster --service hello-world-service --force-new-deployment --region ap-south-1
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
